AWSTemplateFormatVersion: 2010-09-09
Description: ECS Service and Task definition
Parameters:
  ClusterName:
    Description: ECS cluster name
    Type: String
  EnvironmentName:
    Description: Environment name
    Type: String
  ListenerArn:
    Description: Arn of ELB listener to attach service to
    Type: String
  Namespace:
    Description: Docker namespace
    Type: String
  PodName:
    Description: Pod Name
    Type: String
  Priority:
    Description: Listener rule priority
    Type: String
  PrivateDomain:
    Description: Private domain name
    Type: String
  PrivateSubnetIds:
    Description: Private subnetIds
    Type: String
  ServiceHealthTopic:
    Description: Health Topic
    Type: String
  ServiceName:
    Description: Service Name
    Type: String
  VpcId:
    Description: ID of the VPC for the service
    Type: String
  Version:
    Description: Composite version
    Type: String

Resources:
  ContainerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
      Path: '/'
      Policies:
        - PolicyDocument:
            Statement:
                Action:
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - ec2:Describe*
                  - ec2:AuthorizeSecurityGroupIngress
                Effect: Allow
                Resource: '*'
          PolicyName: ecs-service
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
                Action:
                  - cloudwatch:EnableAlarmActions
                  - cloudwatch:PutMetricData
                  - cloudwatch:PutMetricAlarm
                  - logs:*
                Effect: Allow
                Resource: '*'
          PolicyName: cloudwatch-basic
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource: !Sub arn:aws:s3:::net-platform-mongodb-snapshots-${EnvironmentName}
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucketMultipartUploads
                  - s3:ListMultipartUploadParts
                Effect: Allow
                Resource: !Sub arn:aws:s3:::net-platform-mongodb-snapshots-${EnvironmentName}/*
          PolicyName: mongo-snapshots
    Type: 'AWS::IAM::Role'

  EcsService:
    Properties:
      Cluster: !Ref ClusterName
      DesiredCount: 1
      LoadBalancers:
        -
          ContainerName: !Ref ServiceName
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      Role: !Sub ecsServiceRole-${ClusterName}
      TaskDefinition:  !Ref EcsTask
    Type: 'AWS::ECS::Service'

  EcsTask:
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: ENVIRONMENT_NAME
              Value: !Ref EnvironmentName
            - Name: ENVIRONMENT_REGION
              Value: !Ref AWS::Region
            - Name: SERVICE_NAME
              Value: !Ref ServiceName
            - Name: MONGOHOST
              Value: !Sub 'mongodb.${PrivateDomain}'
          Essential: true
          Image: !Sub 639193537090.dkr.ecr.us-east-1.amazonaws.com/${Namespace}/mongo-backup:${Version}
          Memory: 1024
          MemoryReservation: 300
          Name: !Ref ServiceName
          PortMappings:
            - ContainerPort: 8080
              HostPort: 0
              Protocol: tcp
      Family: !Sub ${ServiceName}-${EnvironmentName}
      TaskRoleArn : !GetAtt ContainerRole.Arn
    Type: AWS::ECS::TaskDefinition

  HealthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Notify SNS if there are no healthy hosts
      MetricName: HealthyHostCount
      Namespace: AWS/ApplicationELB
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 0.0
      AlarmActions:
      - !Ref ServiceHealthTopic
      OKActions:
      - !Ref ServiceHealthTopic
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: TargetGroup
          Value: !Select [5, !Split [':', !Ref TargetGroup]]
        - Name: LoadBalancer
          Value: !Join
            - '/'
            - - !Select [1, !Split ['/', !Ref ListenerArn]]
              - !Select [2, !Split ['/', !Ref ListenerArn]]
              - !Select [3, !Split ['/', !Ref ListenerArn]]

  Lambda:
    Properties:
      Code:
        S3Bucket: !Sub net-platform-devops-${EnvironmentName}
        S3Key: !Sub lambda/mongoBackup-${Version}.zip
      Description: Calls mongo-backup agent to start snapshot
      Environment:
        Variables:
          BUCKET: !Sub net-platform-mongodb-snapshots-${EnvironmentName}
          ROOT_PATH: !Sub '/${EnvironmentName}/'
          URL: !Sub 'http://core-proxy.${PrivateDomain}/mongo-backup/'
      FunctionName: !Sub ${EnvironmentName}-mongo-backup
      Handler: mongo-snapshot.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSG.GroupId
        SubnetIds:
          - !Select [0, !Split [',', !Ref PrivateSubnetIds]]
          - !Select [1, !Split [',', !Ref PrivateSubnetIds]]
          - !Select [2, !Split [',', !Ref PrivateSubnetIds]]

    Type: 'AWS::Lambda::Function'

  LambdaInvokePermission:
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref Lambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledEvent.Arn
    Type: 'AWS::Lambda::Permission'

  LambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Path: '/'
    Type: 'AWS::IAM::Role'

  LambdaSG:
    Properties:
      GroupDescription: Security Group for mongo-backup Lambda
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Name
          Value: !Sub ${EnvironmentName}-mongo-backup-lambda-sg
      VpcId: !Ref VpcId
    Type: 'AWS::EC2::SecurityGroup'

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      Conditions:
        - Field: path-pattern
          Values:
            - !Sub /${ServiceName}/*
      ListenerArn: !Ref ListenerArn
      Priority: !Ref Priority

  ScheduledEvent:
    Properties:
      Description: Trigger snapshot once a day
      Name: !Sub MongoBackupEvent-${EnvironmentName}
      ScheduleExpression: 'cron(30 6 ? * * *)'
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt Lambda.Arn
          Id: !Sub ${EnvironmentName}-MongoBackupLambda
    Type: 'AWS::Events::Rule'

  TargetGroup:
    Properties:
      HealthCheckPath: !Sub /${ServiceName}/
      Matcher:
        HttpCode: '200-299'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: ClusterName
          Value: !Ref ClusterName
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '0'
      VpcId:  !Ref VpcId
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
