AWSTemplateFormatVersion: 2010-09-09
Description: 'CodePipeline REPOSITORY_NAME'
Parameters:
#
# The following parameters must be manually set by the creator
#
  ClusterName:
    Default: 'core'
    Description: 'Name of ECS cluster'
    Type: String
  InstallInApplicationPod:
    Default: 'true'
    Description: 'Install this application in application pods (true/false)?'
    Type: String
  InstallInDataPod:
    Default: 'true'
    Description: 'Install this application in data pods (true/false)?'
    Type: String
  PrivilegedMode:
    Default: 'true'
    Description: 'Set to true for docker container builds and false for all others'
    Type: String
  ServiceName:
    Default: 'mongo-backup'
    Description: 'Name of service'
    Type: String

#
# The following parameters should not be modified,
# they are set by pipeline creator.
#
  ArtifactPath:
    Description: 'Path to source artifact in bucket'
    Type: String
  DataPod:
    Description: 'Name of the data pod'
    Type: AWS::SSM::Parameter::Value<String>
  DeployOnly:
    Description: 'Deploy only pod?'
    Type: AWS::SSM::Parameter::Value<String>
  EnvironmentName:
    Description: 'Name of the environment'
    Type: AWS::SSM::Parameter::Value<String>
  GitOAuthToken:
    Description: 'Needed to log into GitHub'
    NoEcho: true
    Type: String
  PodName:
    Description: 'Name of the pod'
    Type: AWS::SSM::Parameter::Value<String>
  PrivateSubnetIds:
    Description: Subnets the instances will run in
    Type: List<AWS::EC2::Subnet::Id>
  RepositoryName:
    Description: 'GitHub repository name'
    Type: String
  RepositoryOwner:
    Description: 'GitHub repository owner'
    Type: String
  TrustedNetworksGroupId:
    Description: Trusted Networks Security Group ID
    Type: AWS::EC2::SecurityGroup::Id
  VpcId:
    Description: VPC ID
    Type: AWS::EC2::VPC::Id

Conditions:
  DoDeploy: !Or
    - !And
      - !Not [!Equals [!Ref 'DataPod', !Ref 'PodName']]
      - !Equals [!Ref 'InstallInApplicationPod', 'true']
    - !And
      - !Equals [!Ref 'DataPod', !Ref 'PodName']
      - !Equals [!Ref 'InstallInDataPod', 'true']
  NotDeployOnly: !Equals [!Ref 'DeployOnly', 'false']

Resources:
  BuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: 2012-10-17
      Path: /service-role/
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Statement:
              - Action: '*'
                Effect: Allow
                Resource: '*'

  Build:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub 'pipeline-artifacts-${PodName}/${ServiceName}/Cache'
        Type: S3
      Description: 'Build code'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: CLUSTER_NAME
            Value: !Ref 'ClusterName'
          - Name: ENV
            Value: !Ref 'EnvironmentName'
          - Name: IMAGE_NAME
            Value: !Ref 'ServiceName'
          - Name: POD
            Value: !Ref 'PodName'
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/build-image:latest'
        PrivilegedMode: !Ref 'PrivilegedMode'
        Type: LINUX_CONTAINER
      Name: !Sub '${PodName}-${ServiceName}-build'
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Type: CODEPIPELINE

  PrBuild:
    Condition: NotDeployOnly
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Location: !Sub 'pipeline-artifacts-${PodName}/${ServiceName}/Cache'
        Type: S3
      Description: 'Pull Requests tests'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: CLUSTER_NAME
            Value: !Ref 'ClusterName'
          - Name: ENV
            Value: !Ref 'EnvironmentName'
          - Name: IMAGE_NAME
            Value: !Ref 'ServiceName'
          - Name: POD
            Value: !Ref 'PodName'
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/build-image:latest'
        PrivilegedMode: !Ref 'PrivilegedMode'
        Type: LINUX_CONTAINER
      Name: !Sub '${PodName}-${ServiceName}-pr-build'
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        Auth:
          Type: OAUTH
          Resource: !Ref 'GitOAuthToken'
        BuildSpec: 'specfiles/pr/buildspec.yml'
        Location: !Sub 'https://github.com/${RepositoryOwner}/${RepositoryName}.git'
        Type: GITHUB
      Triggers:
        Webhook: True

  SecurityBuild:
    Condition: NotDeployOnly
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Location: !Sub 'pipeline-artifacts-${PodName}/${ServiceName}/Cache'
        Type: S3
      Description: 'Security build and test'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: CLUSTER_NAME
            Value: !Ref 'ClusterName'
          - Name: ENV
            Value: !Ref 'EnvironmentName'
          - Name: IMAGE_NAME
            Value: !Ref 'ServiceName'
          - Name: POD
            Value: !Ref 'PodName'
        Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/build-image:latest'
        PrivilegedMode: !Ref 'PrivilegedMode'
        Type: LINUX_CONTAINER
      Name: !Sub '${PodName}-${ServiceName}-security-build'
      ServiceRole: !GetAtt BuildRole.Arn
      Source:
        BuildSpec: 'specfiles/security/buildspec.yml'
        Type: CODEPIPELINE
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets: !Ref PrivateSubnetIds
        SecurityGroupIds: [!Ref TrustedNetworksGroupId]


  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Statement:
              - Action: '*'
                Effect: Allow
                Resource: '*'

  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Statement:
              - Action: '*'
                Effect: Allow
                Resource: '*'

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Sub 'pipeline-artifacts-${PodName}'
      Name: !Sub '${PodName}-${ServiceName}'
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: !Ref 'ServiceName'
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                PollForSourceChanges: false
                S3Bucket: !Sub 'pipeline-artifacts-${PodName}'
                S3ObjectKey: !Sub '${ArtifactPath}/${RepositoryName}.zip'
              OutputArtifacts:
                - Name: Source
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: !Sub '${ServiceName}-build'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref Build
              InputArtifacts:
                - Name: Source
              OutputArtifacts:
                - Name: Build
              RunOrder: 1
        - !If
          - DoDeploy
          - Name: !Sub '${ServiceName}-deploy'
            Actions:
              - Name: !Sub '${ServiceName}-${ClusterName}'
                ActionTypeId:
                  Category: Deploy
                  Owner: AWS
                  Provider: CloudFormation
                  Version: 1
                Configuration:
                  ActionMode: CREATE_UPDATE
                  Capabilities: CAPABILITY_IAM
                  RoleArn: !GetAtt CloudFormationRole.Arn
                  StackName: !Sub '${EnvironmentName}-${ServiceName}-${ClusterName}'
                  TemplateConfiguration: !Sub 'Build::${ServiceName}-${ClusterName}.parameters'
                  TemplatePath: !Sub 'Build::${ServiceName}.yml'
                InputArtifacts:
                  - Name: Build
          - !Ref AWS::NoValue

  BuildLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
    - Build
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${Build}'
      RetentionInDays: '30'
  BuildSubscriptionFilter:
    Type: 'AWS::Logs::SubscriptionFilter'
    DependsOn:
    - BuildLogGroup
    Properties:
      LogGroupName: !Sub '/aws/codebuild/${Build}'
      FilterPattern: ''
      DestinationArn: !Sub 'arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${EnvironmentName}-logstash'
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${EnvironmentName}-CloudWatchLogsKinesisRole'
